# -*- coding: utf-8 -*-
# -*- coding: utf-8 -*-
"""
Created on Wed Sep 13 12:21:24 2017

@author: Christopher
"""
import random
import math
import numpy

def cardGenerator(x):
    """x is amount of players"""
    cardsNeeded = 2*x
    cardsNeeded = cardsNeeded + 5
  
    hands = [0]*(cardsNeeded)
  
    i = 0
    while i < (cardsNeeded):
        card = math.floor(random.uniform(1,53))
        j = 0
        test = 0
        for j in (0,i):
            while (test != 1):
                if (card == hands[j]):
                    card = math.floor(random.uniform(1,53))
                else:
                    test = 1
           
                
        hands[i] = card
        i=i+1
    return hands
def getPlayerHand(x,y,z):
    """ x is player number, y is total players, z is hands"""
    playerHand = [0]*2
    playerHand[0] = z[x]
    playerHand[1] = z[x+y]
    return playerHand
def getDisplayHand(x):
    """playerHand"""
    size = 2*len(x)
    displayHand = [0]*size
    i=0
    j=0
    while (i<size):
        cardDisplay = x[j]
       
        cardValue = cardDisplay%13 + 2 

        if (cardValue== 11):
                displayHand[i] = "J"
        elif (cardValue == 12):
                displayHand[i] = "Q"
        elif (cardValue == 13):
                displayHand[i] = "K"
        elif (cardValue == 14):
                displayHand[i] = "A"
        else:
            displayHand[i] = cardValue
        if (cardDisplay <= 13):
            displayHand[i+1] = "spade"
        elif (cardDisplay <= 26):
            displayHand[i+1] = "heart"
        elif (cardDisplay <= 39):
            displayHand[i+1] = "diamond"
        else:
            displayHand[i+1] = "club"
        i = i+2
        j=j+1
            
         
    return displayHand
def getFlop(x,y):
    """x is hands and y is total players"""
    flopStart = y*2 
    flop = [0]*3
    i = 0
    while (i < 3):
        flop[i] = x[flopStart+i]
        
        i=i+1
    return flop
def getTurn(x,y):
    turnLoc = y*2 + 3
    turn = [0]
    turn[0] = x[turnLoc]
    return turn        
def getRiver(x,y):
    riverLoc = y*2 + 4
    river = [0]
    river[0] = x[riverLoc]
    return river
def checkHand(x,y):
    """x is hands, y is total players"""
    size = len(x)  
    cardValues = [0]*size
    cardSuits = [0]*size
    handStrengths = [0]*size
    tieBreak = [0]*size
    for i in range (size):
        cardValues[i] = x[i]%13
        cardSuits = math.floor(x[i]/13)
   
   
   
    handValues = [0]*7
    holder = [0]*size
    cardValuesSorted = [0]*size
    allCards = [0]*5
    holder2 = [0]*5
    holder=cardValues
    

        
    numpy.sort(holder)
    '''numpy.sort(holderSuits)'''
    cardValuesSorted = holder
    
       
    handValues[2] = cardValuesSorted[2*y]
    handValues[3] = cardValuesSorted[2*y + 1]
    handValues[4] = cardValuesSorted[2*y + 2]
    handValues[5] = cardValuesSorted[2*y + 3]
    handValues[6] = cardValuesSorted[2*y + 4]
    for h in range (2,7):
        allCards[h-2] = handValues[h]
    pairAll = 0
    twoPairAll = [0]*2
    threeKindAll = 0
    fourKindAll = 0
    straightAll = 0
    flushAll = 0
    fullHouseAll = [0]*2
    straightFlushAll = 0
    RoyalFlushAll = 0
    pair1,pair2 = checkPair(allCards)
    if(pair1 != 0):
        pairAll = 15 
           
        if (pair1 > 1):
            threeKindAll = 120 
              
            if (pair1 > 2):
                fourKindAll = 2000 
                   
        if(pair2 != 0 and pair1 == 0):
            pairAll = 15 + handValues[1]
         
            if (pair2 > 1):
                threeKindAll = 120 
                
                if (pair2 > 2):
                    fourKindAll = 2000 
                   
        if(pair1 !=0 and pair2!=0):
            twoPairAll[0] = 45 
           
            if(threeKindAll !=0):
                fullHouseAll[0] =  1000 
    g = 0
    while g <5:
       
       handValues[g+2] = cardValuesSorted[(2*y) + g]
      
       g= g+1
       
    person = 1  
    for j in range (y):
        pair = pairAll
        twoPair =twoPairAll
        threeKind = threeKindAll
        fullHouse =fullHouseAll
        fourKind = fourKindAll
        straight = straightAll
        flush = flushAll
        straightFlush = straightFlushAll
        royalFlush = RoyalFlushAll
        highCard = 0  
        flushPoints = 0
        flushCards=[0]*5
        
        
        playerHand = getPlayerHand(j, y, cardValues)
        handValues[0] = playerHand[0]
        handValues[1] = playerHand[1]
        pair1,pair2 = checkPair(handValues)
        if(pair1 != 0 ):
            pair = pair + 15 + handValues[0]
            
            if (pair1 > 1):
                threeKind = threeKind + 120 + handValues[0]

                if (pair1 > 2):
                    fourKind = fourKind+ 2000 + handValues[0]

        if(pair2 != 0 and pair == 0):
            pair = pair + 15 + handValues[1]
            if (pair2 > 1):
                threeKind = threeKind + 120 + handValues[1]
                if (pair2 > 2):
                    fourKind = fourKind + 2000 + handValues[1]
        if(pair1 !=0 and pair2!=0):
            twoPair[0] = twoPair[0] + 45 + max(handValues[0],handValues[1])
            twoPair[1] = min(handValues[0],handValues[1])
            if(threeKind !=0):
                fullHouse[0] =  fullHouse[0] + 1000 + (threeKind- 120)
                if ((threeKind - 120 == handValues[0])):
                    spare = handValues[0]
                else:
                    spare = handValues[1]
                fullHouse[1] = spare
        
        straightTrue = checkStraight(handValues)
        if(straightTrue != 0):
            straight = straight + 250 + straightTrue
        flush = checkFlush(x,cardValues,j,y)
        if(flush!=0):
            flushPoints = 500+flush
        if(straight and flush != 0):
            straightFlush = checkStraightFlush(flushCards)
            straightFlush = straightFlush + straightFlush + 4000
            if(straightFlush != 0):
                royalFlush= checkRoyalFlush(straightFlush)
                royalFlush = royalFlush + 10000 + royalFlush
        highCard = checkHighCard(handValues)
        handStrengths[j] = highCard+ pair+ twoPair[0]+ threeKind+fullHouse[0]+fourKind+straight+flushPoints+straightFlush+royalFlush 
        person = person + 1
        

    return checkWinningHand(handStrengths)  
def checkHighCard(x):
    high = max(x[0], x[1])
    
    return high
def checkPair(x):
     """ x is the set of relevant cards"""
     card1 = x[0]
     card2 = x[1]
     numberOfPairs1 = 0
     numberOfPairs2 = 0 
     
     if(card1==card2):
         numberOfPairs1 = 1
         for p in range(2,len(x)):
             if (card1 == x[p]):
                 numberOfPairs1 = numberOfPairs1 + 1
             return numberOfPairs1,0
     for o in range (2,len(x)):
         if (card1 == x[o]):
             numberOfPairs1 = numberOfPairs1 + 1
        
     for w in range (2,len(x)):
        if (card2 == x[w]):
            numberOfPairs2 = numberOfPairs2 + 1
     o = 0
     w = 0
     return numberOfPairs1, numberOfPairs2
 
def checkFlush(x,y,z,a):
    '''x is the set of the unaltered numbers, y is unsorted card values, z is the player number, a is total plahers,'''
   
    count = 0
    countTotal = 0
    suits = [0]*(7)
    hand = getPlayerHand(z,a,y)
    flushCards = [0]*7
    for i in range ((2*a),(2*a + 5)):
        suits[i-((2*a)-2)] = math.floor(x[i]/13)
    suits[0] = hand[0]
    suits[1] = hand[1]
    for k in range (4):
        for q in range (7):
            if(suits[q] == k):
                count = count + 1 
                flushCards[q] = y[q]
        q = 0
        k = 0
        if (count >=3):
            if(count < 5):
                return int(0)
            else:
                return int(1)
        countTotal = countTotal + count 
        if (countTotal >=3):
            return int(0)
        count = 0
    return int(0)
def checkStraight(x):
    ''' x is set of sorted values'''
   
    count = 1
    countTotal = 1
    spot = 0
    """print(x)"""
    while (spot <6):
        while(spot<6):
            
            """print(spot)
            print(x[spot])"""
            if(x[spot] +1 != x[spot+1]):
                spot1 = spot+1
                spot = 6
               
            else:
                count = count + 1
                spot = spot + 1 
            
        spot = spot1
        countTotal = countTotal + count
      
       
        if (count >= 3):
            if (count < 5):
                return 0
            else:
              
                return x[spot]
        if (countTotal >= 3):
            return 0
        count = 1
    return 0
def checkStraightFlush(x):
    x = numpy.sort(x)
    for i in range (4):
        if(x[i] + 1 != x[i+1]):
            i = 0
            return 0
    i = 0
    return max(x)
def checkRoyalFlush(x):
    '''x is high card from SF'''
    if(x == 14):
        return (x)
    else:
        return 0
def checkWinningHand(x): 
    maxVal = 0
    for j in range(len(x)):
        if(x[j] >= maxVal):
            maxVal = x[j]
            
    for i in range(len(x)):
        if(x[i] == maxVal):
            return i
    
    
        
    
    
def askAction(x,y,z,a):
    """x is player number, y is current amount to call, z is players current stack, a is bets so far"""
    toCallForPlayer = y - a[x]
   
    action = input("Player " + str(x+1) + " your current stack is " + str(z)+ ". The amount to call is " + str(toCallForPlayer) + ". Would you like to fold, call, or raise? (Calling when amount to call is 0 is equivalent to checking)")
    if (action == "fold"):
        return 0
    elif(action == "call"):
        return 1
    elif(action == "raise"):
        return 2
    else:
        print("Input cannot be understood. Please enter again.")
        return askAction(x,y,z,a)

def winInitial(bothHands):
    finalCards = [0]*9
    player1Wins = 0
    player2Wins = 0
    player1WinPercent = 0; player2WinPercent = 0
    for k in range (4):
        finalCards[k] = bothHands[k]
    for i in range (10000):
        j = 0
        while j <5:
            stop = 0
            newCard = math.floor(random.uniform(1,53))
            for m in range(4):
                if(bothHands[m]==newCard):
                    stop = 1
                    break
            if(stop !=1):
                finalCards[4+j] = newCard
                j = j+1
        winner = checkHand(finalCards,2)
        if(winner ==0):
            player1Wins = player1Wins +1
        elif(winner ==1):
            player2Wins = player2Wins + 1
    player1WinPercent = float(player1Wins)/float(10000)
    player2WinPercent = float(player2Wins)/float(10000)
    return player1WinPercent, player2WinPercent

def winProb(hands,table):
    """calcuates the probability of each hand winning given all of tge cards dealt, uses Monte Carlo Method"""
    allCards = [0]*(len(hands) + len(table))
    for r in range(len(hands)):
        allCards[r] = hands[r]
    for s in range(len(table)):
        allCards[len(hands) + s] = table[s]
    finalCards = [0]*9
    player1Win = 0
    player2Win = 0
    player1WinPercent = 0; player2WinPercent = 0
    for k in range (7):
        finalCards[k] =allCards[k]
    if(len(allCards)==7):
        for i in range (10000):
            j = 0
            while j<2:
                stop = 0
                newCard = math.floor(random.uniform(1,53))
                for h in range(7):
                    if(newCard == allCards[h]):
                        stop = 1
                        break
                if(stop==0):
                    finalCards[7+j] = newCard
                    j = j+1  
            winner = checkHand(finalCards,2)
            if(winner== 0):
                player1Win = player1Win + 1
            elif(winner==1):
                player2Win = player2Win + 1
        player1WinPercent = float(player1Win)/float(10000)
        player2WinPercent = float(player2Win)/float(10000)
    else:
        for m in range(10000):
            n = 0
            while n < 1:
                stop = 0
                newCard = random.uniform(1,53)
                for h in range(7):
                    if(newCard == allCards[h]):
                        stop = 1
                        break
                if(stop==0):
                    finalCards[7+n] = newCard
                    n = n+1
            winner = checkHand(finalCards,2)
            if(winner == 0):
                player1Win = player1Win + 1
            elif(winner == 1):
                player2Win = player2Win + 1
        player1WinPercent = float(player1Win)/float(10000)
        player2WinPercent = float(player2Win)/float(10000)
    return player1WinPercent, player2WinPercent

def probWinFinal(hand,table):
    """playerHand and tableCards"""
    finalCards = [0]*9
    finalCards[0] = hand[0]
    finalCards[2] = hand[1]
    player1Win = 0;  player1WinPercent = 0
    for d in range(5):
        finalCards[4+d] = table[d]
    print(finalCards)
    for j in range (10000):
        k = 0

    while (k<2):
            stop = 0
            card = math.floor(random.uniform(1,53))
            for n in range(9):
                if(card == finalCards[n]):
                    stop = 1
                    break
            if(stop != 1):
                finalCards[1 + 2*k] = card
                k = k+1
        winner = checkHand(finalCards,2)
        if(winner ==0):
            player1Win = player1Win + 1
    player1WinPercent = float(player1Win)/float(10000)
    return player1WinPercent
            
def percentWinOnBet(amountBet, Pot):
    percent = float(amountBet)/float(Pot)
    decimal = float(1)+percent 
    percentDecimal = float(1)/decimal
    percentDecimal = 1- percentDecimal
    return percentDecimal

def ratioMaker(percentDecimal, actualPercent):
    if(actualPercent ==0):
        return 10
    return percentDecimal/actualPercent
def pointMaker(percentBet, ratio):
    return ([percentBet,ratio])
def elbowMethod(data,klow,khigh):
    distortions = []
    K = range(klow,khigh)
    for k in K:
        kmeanModel = KMeans(n_clusters=k).fit(data)
        kmeanModel.fit(data)
        distortions.append(sum(numpy.min(cdist(data,kmeanModel.cluster_centers_,'euclidean'),axis=1))/data.shape[0])
    slopes = [0]*(len(distortions)-1) 
    slopeTotal = 0
    for i in range (1,len(distortions)):
        changeY = distortions[i] - distortions[i-1]
        changeX = 1
        slope = changeY/changeX
        slope = numpy.abs(slope)
        slopes[i-1] = slope
        slopeTotal = slope + slopeTotal
    avgSlope = slopeTotal/(len(slopes))
    for n in range(len(slopes)):
        if(slopes[n]<avgSlope):
            optimalK = n + 1
            break
    return optimalK  
def clustering(data,kValue):
    kmeanModel = KMeans(n_clusters=kValue).fit(data)
    kmeanModel.fit(data)
    return kmeanModel.cluster_centers

totalPlayers = 2
stacks = [100]*totalPlayers
bankrupt = [0]*totalPlayers
# if bankrupt -> 1
inPlay = totalPlayers
points = [0]*1000
totalPoints = 0
if(totalPoints >= 40):
    numberOfClusters = elbowMethod(points,1,9)
    centers = clustering(points,numberOfClusters)
while (inPlay > 1):
    inHand = bankrupt
    handsNeeded = 0
    ante = 1
    for w in range(totalPlayers):
        handsNeeded = handsNeeded + bankrupt[w]
    handsNeeded = totalPlayers - handsNeeded
    currentHands = [0]*handsNeeded
    currentHands = cardGenerator(handsNeeded)
    toCall = 0
    pot = 0
    moveOn = 0
    for k in range (totalPlayers):
        hand = getPlayerHand(k, totalPlayers, currentHands)
        hand = getDisplayHand(hand)
        print (hand)
        
    count = -1
    pot = totalPlayers*ante
    for ppl in range(totalPlayers):
        stacks[ppl] = stacks[ppl] - ante
    for i in range (4):
        moveOn = 0
        count = count + 1
        raiser = -1
        toCall = 0
        bets = [0]*(len(inHand))
       
        while(moveOn < len(inHand)):
          moveOn = 0
          addToMoveOn = 0
          
          for j in range(len(inHand)):
              
              if (j == raiser):
                  addToMoveOn = addToMoveOn + 1
                  
              else:
                  if(inHand[j] == 0):
                      action = -1
                      currentStack = stacks[j]
                      
                     
                      action = askAction(j, toCall,currentStack,bets)
                      if (action == 0):
                          inHand[j] = 1
                          addToMoveOn = addToMoveOn  +1
                          
                          
                      elif (action == 1):
                          stacks[j] = stacks[j] - toCall
                          if(stacks[j] <=0):
                              print("You are all in.")
                              inHand[j] =2
                          addToMoveOn = addToMoveOn + 1
                         
                          pot = pot + toCall
                          bets[j] = bets[j]+toCall
                      elif (action ==2):
                          raiseAmount = int(input("By how much would you like to raise?"))
                          toCall = toCall + raiseAmount
                          stacks[j] = stacks[j] - toCall
                          addToMoveOn = 1
                         
                          raiser = j
                          if(stacks[j] == 0):
                              print("You are all in.")
                              inHand[j] = 2
                          
                          elif(stacks[j] < 0):
                              overBy = numpy.abs(stacks[j])
                              
                              toCall = toCall - overBy
                            
                              raiseAmount = raiseAmount - overBy
                              
                            
                              print("You raised more than you have.You're raise was reduced to " + str(raiseAmount) + ". You are all in.")
                              inHand[j] = 2
                          pot = pot + toCall
                          bets[j] = bets[j]+toCall
                  else:
                    
                    addToMoveOn = addToMoveOn +1
          print ("pot" + str(pot))
          
          moveOn = addToMoveOn + moveOn
          
                
        if(count == 0):
            odds = [0]*(2)
            odds[0],odds[1]= winInitial(currentHands)
            for i in range(totalPlayers-1):
                betWinPercent = 0; ratio = 0
                if(bets[i]!=0):
                    betWinPercent=percentWinOnBet(bets[i],pot)
                    percentPotBet = float(bets[i])/float(pot)
                    ratio = ratioMaker(betWinPercent,odds[i])
                    points[totalPoints] = pointMaker(percentPotBet,ratio)
                    print(points[totalPoints])
                    totalPoints = totalPoints + 1           
            flop = getFlop(currentHands, totalPlayers)
            flopDisplay = getDisplayHand(flop)
            print ("Flop " + str(flopDisplay))
        elif (count ==1):
           odds=[0]*2
           odds[0],odds[1] = winProb(currentHands,flop)
           for j in range(totalPlayers-1):
               betWinPercent = 0; ratio = 0
               if(bets[j]!=0):
                   betWinPercent = percentWinOnBet(bets[i],pot)
                   percentPotBet = float(bets[j])/float(pot)
                   ratio = ratioMaker(betWinPercent,odds[j])
                   points[totalPoints] = pointMaker(percentPotBet,ratio)
                   print(points[totalPoints])
                   totalPoints = totalPoints+1
                   
           turn = getTurn(currentHands, totalPlayers)
           turnDisplay = getDisplayHand(turn)
           print ("Turn " + str(turnDisplay))
        elif(count==2):
           turnAndFlop = [0]*4
           turnAndFlop[3] = turn[0] 
           for p in range(3):
               turnAndFlop[p] = flop[p]
           odds1 = [0]*2
           odds1[0],odds1[1] = winProb(currentHands,turnAndFlop)
           for k in range(totalPlayers-1):
               betWinPercent = 0; ratio = 0
               if(bets[k]!=0):
                   betWinPercent = percentWinOnBet(bets[k],pot)
                   percentPotBet = float(bets[k])/float(pot)
                   ratio = ratioMaker(betWinPercent, odds1[k])
                   points[totalPoints] = pointMaker(percentPotBet, ratio)
                   print(points[totalPoints])
                   totalPoints = totalPoints + 1
               
           river = getRiver(currentHands, totalPlayers)
           riverDisplay = getDisplayHand(river)
           print ("river" + str(riverDisplay)) 
        else:
             nonComputerHand = [0]*2
             nonComputerHand[0] = currentHands[0]; nonComputerHand[1] = currentHands[2]
             allTableCards = [0]*5
             for q in range(4):
                 allTableCards[q] = turnAndFlop[q]
             allTableCards[4] = currentHands[8]
             odds1 = probWinFinal(nonComputerHand,allTableCards)
             if(bets[0] != 0):
                 betWinPercent = percentWinOnBet(bets[0], pot)
                 percentPotBet = float(bets[0])/float(pot)
                 ratio = ratioMaker(betWinPercent, odds1)
                 points[totalPoints] = pointMaker(percentPotBet, odds1)
                 print(points[totalPoints])
                 totalPoints = totalPoints + 1
             numberToCheck = 0
             spot = 0
             playerToCheck = [-1]*(totalPlayers)
             for t in range (totalPlayers):
                 if (inHand[t] != 1):
                     numberToCheck = numberToCheck + 1
                     playerToCheck[spot] = t
                     spot = spot + 1
                     
                     
             handsToCheck = [0]*(numberToCheck*2 + 5)
             
             for m in range (numberToCheck):
                 check = playerToCheck[m]
                 handsToCheck[m] = currentHands[check]
                 handsToCheck[m + totalPlayers] = currentHands[check + totalPlayers]
             for n in range (5):
                 handsToCheck[numberToCheck*2 + n] = currentHands[totalPlayers*2 + n]
             
             winner = checkHand(handsToCheck, numberToCheck)
             print("The winner(s) of the pot are " + str(winner+1) +". The pot was worth " + str(pot))
             stacks[winner] = stacks[winner] + pot
             for h in range (totalPlayers):
                if(stacks[h] <= 0):
                    bankrupt[h] = 1
                    inPlay = inPlay - 1
                    print ("Player " +str(h+1)+ " is out.")
   
winner = -1
check = 0
while (winner == -1):
    if (bankrupt[check] != 1):
        winner = check+1
    check = check + 1
print ("Congratualtions! PLayer " + str(winner) + " has won.")
   
                
                    
             
